import { app, BrowserWindow } from 'electron';
import { ipcMain } from 'electron';

import './index.css';

if (require('electron-squirrel-startup') === true) app.quit();

import { packets } from "knotfree-ts-lib"
import { types } from "knotfree-ts-lib"
import { utils } from "knotfree-ts-lib"
import { knothttp } from 'knotfree-ts-lib'

// import * as packets from "./knotfree-ts-lib/packets"
// import * as types from "./knotfree-ts-lib/types"
// import * as knothttp from './knotfree-ts-lib/httpClient'
// import * as utils from './knotfree-ts-lib/utils'


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

console.log('MAIN_WINDOW_WEBPACK_ENTRY', MAIN_WINDOW_WEBPACK_ENTRY);
console.log('MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY', MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 900,
    width: 1600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // atw turn this off for production.
  // const isDev = process.env.KNOT_KUNG_FOO === 'atw'
  const isDev = process.env.NODE_ENV === 'development';
  if (isDev) mainWindow.webContents.openDevTools();;

  // replace the default updateTestTopic.
  var updateTestTopic = (arg: packets.Universal) => {
    if (arg) {
      mainWindow.webContents.send('my-testtopic-channel', arg)
    }
  }

  const hashedName64 = "xHKLHv0yN_784LG-smK64uX6y2M8NlFd"// utils.toBase64Url('testtopic')  
  // TODO: put in lib
  function makeReply(message: string) {
    const header = 'HTTP/1.0 200 OK\r\nServer: knotfree-phone-hoster\r\nDate: Wed, 06 Nov 2024 15:11:54 GMT\r\nContent-type: text/html; charset=utf-8\r\nContent-Length: '
    const body = '<html><head><title>phone-reply</title></head><body><h1>phone-reply</h1><p>' + message + '</p></body></html>'
    var reply = header + body.length + '\r\n\r\n' + body
    return reply
  }

  function updateLogEntry(arg: packets.Universal) {
    const send: packets.Send = packets.FillSend(arg)
    if (send) {
      const b = Buffer.from(send.Address.Bytes)
      let hashed = utils.toBase64Url(b)
      // console.log("haveTestTopic hashed ",hashed," vs " , hashedName64)
      if (hashed === hashedName64) {
        // console.log("haveTestTopic phone-reply", arg.toString())
        var reply = packets.MakeSend()
        reply.Address = { Type: ' ', Bytes: Buffer.from('testtopicreply') }
        reply.Source = { Type: ' ', Bytes: Buffer.from('dummy-return-address') }
        const replyStr = "hello from local-hoster" + new Date().toISOString()
        // const madeReply = makeReply(replyStr) no need for html
        // console.log("madeReply to testtopicreply", Buffer.from(replyStr).toString())
        reply.Payload = Buffer.from(replyStr)
        reply.optionalKeyValues.set('debg',Buffer.from('12345678'))
        gadget.httpMonger.packer.write(reply)
      }
    }
    updateTestTopic(arg)
  }
  let host = "knotfree.io"
  // host = "localhost"

  // console.log("upDateTestTopic replaced")
  // do this below instead? 
  // just add "testtopic",0 in the UI
  // subscriber.startTestTopicWatcher(updateTestTopic,host,["testtopic"])

  var onLoadConfig = (arg: types.ServerConfigList) => {
    console.log("onLoadConfig sending", arg.toString())
    mainWindow.webContents.send('load-config', arg)

    if (gadget)
      gadget.haveNewConfig(arg)
  }
  const serverListConfig = readConfig()
  // this is fvcked up
  setTimeout(() => {
    onLoadConfig(serverListConfig)
  }, 1000)
  // or localhost 
  const gadget = knothttp.startHttpProxy(serverListConfig, host, 8384, updateLogEntry)
  console.log("startHttpProxy happened")

  ipcMain.on('update-config', (event, value: any) => {
    let newConfig = value as types.ServerConfigList
    console.log("update-config", JSON.stringify(newConfig))
    writeConfig(newConfig)
    gadget.haveNewConfig(newConfig)
    gadget.httpMonger.packer.doSubscriptions(gadget.httpMonger.packer)
  })

  ipcMain.on('request-config', (event, value: any) => {
    console.log("request-config")
    setTimeout(() => {
      onLoadConfig(serverListConfig)
    }, 100)
  })

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// read the config file
// node js read a file
// const fs = require('fs');
import * as fs from 'fs';
import * as os from 'os';
// import path from 'path';

function readFile(filePath: string): string {
  try {
    const data = fs.readFileSync(filePath, 'utf-8');
    return data;
  } catch (error) {
    console.error(`Error reading file: ${error}`);
    throw error;
  }
}

let directoryPath = '~/.config/knotfree'
const userHomeDirectory = os.homedir()
directoryPath = directoryPath.replace('~', userHomeDirectory)
const filePath = directoryPath + '/ProxyConfig.json'

function readConfig(): types.ServerConfigList {

  try {
    const fileContent = readFile(filePath)
    // console.log("readConfig fileContent",fileContent)
    // send to renderer 
    const config = JSON.parse(fileContent) as types.ServerConfigList
    // console.log('Config read', config)  // this is the config
    return config

  } catch (error) {
    console.error(`Error in readConfig: ${error}`)
    // it's probably missing
    if (!fs.existsSync(directoryPath)) {
      // Create the directory if it doesn't exist
      fs.mkdirSync(directoryPath);
      console.log(`Directory '${directoryPath}' created.`);
    } else {
      console.log(`Directory '${directoryPath}' already exists.`);
    }

    let defaultConfig = types.EmptyServerConfigList
    let str = JSON.stringify(defaultConfig, null, 2) // pretty print
    console.log('Default Config', defaultConfig)
    writeConfig(defaultConfig)
    return defaultConfig
  }
}

function writeConfig(config: types.ServerConfigList) {
  let str = JSON.stringify(config, null, 2) // pretty print
  fs.writeFileSync(filePath, str)
  console.log('config saved')
}


